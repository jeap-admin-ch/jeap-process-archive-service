/**
 * Autogenerated by Avro
 * <p>
 * DO NOT EDIT DIRECTLY
 */
package ch.admin.bit.jeap.processarchive.test.decree.v2;

import org.apache.avro.message.BinaryMessageDecoder;
import org.apache.avro.message.BinaryMessageEncoder;
import org.apache.avro.message.SchemaStore;
import org.apache.avro.specific.SpecificData;

import java.util.Map;
import java.util.Optional;

import static java.util.Map.entry;

@org.apache.avro.specific.AvroGenerated
public class Decree extends org.apache.avro.specific.SpecificRecordBase implements org.apache.avro.specific.SpecificRecord {
    private static final long serialVersionUID = -8175922963711163849L;
    public static final org.apache.avro.Schema SCHEMA$ = new org.apache.avro.Schema.Parser().parse("{\"type\":\"record\",\"name\":\"Decree\",\"namespace\":\"ch.admin.bit.jeap.processarchive.test.decree.v2\",\"fields\":[{\"name\":\"decreeReference\",\"type\":{\"type\":\"record\",\"name\":\"DecreeReference\",\"namespace\":\"ch.admin.bit.jeap.processarchive.test\",\"fields\":[{\"name\":\"type\",\"type\":{\"type\":\"string\",\"avro.java.string\":\"String\"}},{\"name\":\"id\",\"type\":{\"type\":\"string\",\"avro.java.string\":\"String\"}}]}},{\"name\":\"payload\",\"type\":{\"type\":\"string\",\"avro.java.string\":\"String\"}}]}");

    public static org.apache.avro.Schema getClassSchema() {
        return SCHEMA$;
    }

    private static SpecificData MODEL$ = new SpecificData();

    public static final int ARCHIVE_TYPE_VERSION = 2;
    public static final String ARCHIVE_TYPE_NAME = "Decree";
    public static final String SYSTEM_NAME = "JME";
    public static final String REFERENCE_ID_TYPE = "ch.admin.bit.jeap.audit.type.JmeDecreeArtifact";
    public static final int EXPIRATION_DAYS = 60;
    public static final String REGISTRY_URL = "https://bitbucket.bit.admin.ch/scm/bit_jme/jme-archive-type-registry.git";
    public static final String REGISTRY_BRANCH = "feature/JEAP-6074";
    public static final String REGISTRY_COMMIT = "8a20270e772008f8458949cc995cc650d69a98d9";
    public static final String COMPATIBILITY_MODE = "NONE";
    public static final String ENCRYPTION_SECRET_ENGINE_PATH = "secret/engine";
    public static final String ENCRYPTION_KEY_NAME = "key-name";

    public static final Map
            <String, Object> ARCHIVE_TYPE_METADATA = Map.ofEntries(
            entry("archiveTypeVersion", ARCHIVE_TYPE_VERSION),
            entry("archiveTypeName", ARCHIVE_TYPE_NAME),
            entry("systemName", SYSTEM_NAME),
            entry("schema", SCHEMA$),
            entry("referenceIdType", REFERENCE_ID_TYPE),
            entry("expirationDays", EXPIRATION_DAYS),
            entry("registryUrl", REGISTRY_URL),
            entry("registryBranch", REGISTRY_BRANCH),
            entry("registryCommit", REGISTRY_COMMIT),
            entry("compatibilityMode", COMPATIBILITY_MODE),
            entry("encryptionSecretEnginePath", ENCRYPTION_SECRET_ENGINE_PATH),
            entry("encryptionKeyName", ENCRYPTION_KEY_NAME));

    public Map
            <String, Object> metadata() {
        return ARCHIVE_TYPE_METADATA;
    }

    private static final BinaryMessageEncoder<Decree> ENCODER =
            new BinaryMessageEncoder<Decree>(MODEL$, SCHEMA$);

    private static final BinaryMessageDecoder<Decree> DECODER =
            new BinaryMessageDecoder<Decree>(MODEL$, SCHEMA$);

    /**
     * Return the BinaryMessageEncoder instance used by this class.
     *
     * @return the message encoder used by this class
     */
    public static BinaryMessageEncoder<Decree> getEncoder() {
        return ENCODER;
    }

    /**
     * Return the BinaryMessageDecoder instance used by this class.
     *
     * @return the message decoder used by this class
     */
    public static BinaryMessageDecoder<Decree> getDecoder() {
        return DECODER;
    }

    /**
     * Create a new BinaryMessageDecoder instance for this class that uses the specified {@link SchemaStore}.
     *
     * @param resolver a {@link SchemaStore} used to find schemas by fingerprint
     * @return a BinaryMessageDecoder instance for this class backed by the given SchemaStore
     */
    public static BinaryMessageDecoder<Decree> createDecoder(SchemaStore resolver) {
        return new BinaryMessageDecoder<Decree>(MODEL$, SCHEMA$, resolver);
    }

    /**
     * Serializes this Decree to a ByteBuffer.
     *
     * @return a buffer holding the serialized data for this instance
     * @throws java.io.IOException if this instance could not be serialized
     */
    public java.nio.ByteBuffer toByteBuffer() throws java.io.IOException {
        return ENCODER.encode(this);
    }

    /**
     * Deserializes a Decree from a ByteBuffer.
     *
     * @param b a byte buffer holding serialized data for an instance of this class
     * @return a Decree instance decoded from the given buffer
     * @throws java.io.IOException if the given bytes could not be deserialized into an instance of this class
     */
    public static Decree fromByteBuffer(
            java.nio.ByteBuffer b) throws java.io.IOException {
        return DECODER.decode(b);
    }

    private ch.admin.bit.jeap.processarchive.test.DecreeReference decreeReference;
    private String payload;

    /**
     * Default constructor.  Note that this does not initialize fields
     * to their default values from the schema.  If that is desired then
     * one should use <code>newBuilder()</code>.
     */
    public Decree() {
    }

    /**
     * All-args constructor.
     *
     * @param decreeReference The new value for decreeReference
     * @param payload         The new value for payload
     */
    public Decree(ch.admin.bit.jeap.processarchive.test.DecreeReference decreeReference, String payload) {
        this.decreeReference = decreeReference;
        this.payload = payload;
    }

    public SpecificData getSpecificData() {
        return MODEL$;
    }

    public org.apache.avro.Schema getSchema() {
        return SCHEMA$;
    }

    // Used by DatumWriter.  Applications should not call.
    public Object get(int field$) {
        switch (field$) {
            case 0:
                return decreeReference;
            case 1:
                return payload;
            default:
                throw new org.apache.avro.AvroRuntimeException("Bad index");
        }
    }

    // Used by DatumReader.  Applications should not call.
    @SuppressWarnings(value = "unchecked")
    public void put(int field$, Object value$) {
        switch (field$) {
            case 0:
                decreeReference = (ch.admin.bit.jeap.processarchive.test.DecreeReference) value$;
                break;
            case 1:
                payload = (String) value$;
                break;
            default:
                throw new org.apache.avro.AvroRuntimeException("Bad index");
        }
    }

    /**
     * Gets the value of the 'decreeReference' field.
     *
     * @return The value of the 'decreeReference' field.
     */
    public ch.admin.bit.jeap.processarchive.test.DecreeReference getDecreeReference() {
        return decreeReference;
    }

    /**
     * Gets the value of the 'decreeReference' field as an Optional&lt;ch.admin.bit.jeap.processarchive.test.DecreeReference&gt;.
     *
     * @return The value wrapped in an Optional&lt;ch.admin.bit.jeap.processarchive.test.DecreeReference&gt;.
     */
    public Optional<ch.admin.bit.jeap.processarchive.test.DecreeReference> getOptionalDecreeReference() {
        return Optional.<ch.admin.bit.jeap.processarchive.test.DecreeReference>ofNullable(decreeReference);
    }

    /**
     * Sets the value of the 'decreeReference' field.
     *
     * @param value the value to set.
     */
    public void setDecreeReference(ch.admin.bit.jeap.processarchive.test.DecreeReference value) {
        this.decreeReference = value;
    }

    /**
     * Gets the value of the 'payload' field.
     *
     * @return The value of the 'payload' field.
     */
    public String getPayload() {
        return payload;
    }

    /**
     * Gets the value of the 'payload' field as an Optional&lt;java.lang.String&gt;.
     *
     * @return The value wrapped in an Optional&lt;java.lang.String&gt;.
     */
    public Optional<String> getOptionalPayload() {
        return Optional.<String>ofNullable(payload);
    }

    /**
     * Sets the value of the 'payload' field.
     *
     * @param value the value to set.
     */
    public void setPayload(String value) {
        this.payload = value;
    }

    /**
     * Creates a new Decree RecordBuilder.
     *
     * @return A new Decree RecordBuilder
     */
    public static Builder newBuilder() {
        return new Builder();
    }

    /**
     * Creates a new Decree RecordBuilder by copying an existing Builder.
     *
     * @param other The existing builder to copy.
     * @return A new Decree RecordBuilder
     */
    public static Builder newBuilder(Builder other) {
        if (other == null) {
            return new Builder();
        } else {
            return new Builder(other);
        }
    }

    /**
     * Creates a new Decree RecordBuilder by copying an existing Decree instance.
     *
     * @param other The existing instance to copy.
     * @return A new Decree RecordBuilder
     */
    public static Builder newBuilder(Decree other) {
        if (other == null) {
            return new Builder();
        } else {
            return new Builder(other);
        }
    }

    /**
     * RecordBuilder for Decree instances.
     */
    public static class Builder extends org.apache.avro.specific.SpecificRecordBuilderBase<Decree>
            implements org.apache.avro.data.RecordBuilder<Decree> {

        private ch.admin.bit.jeap.processarchive.test.DecreeReference decreeReference;
        private ch.admin.bit.jeap.processarchive.test.DecreeReference.Builder decreeReferenceBuilder;
        private String payload;

        /**
         * Creates a new Builder
         */
        private Builder() {
            super(SCHEMA$);
        }

        /**
         * Creates a Builder by copying an existing Builder.
         *
         * @param other The existing Builder to copy.
         */
        private Builder(Builder other) {
            super(other);
            if (isValidValue(fields()[0], other.decreeReference)) {
                this.decreeReference = data().deepCopy(fields()[0].schema(), other.decreeReference);
                fieldSetFlags()[0] = other.fieldSetFlags()[0];
            }
            if (other.hasDecreeReferenceBuilder()) {
                this.decreeReferenceBuilder = ch.admin.bit.jeap.processarchive.test.DecreeReference.newBuilder(other.getDecreeReferenceBuilder());
            }
            if (isValidValue(fields()[1], other.payload)) {
                this.payload = data().deepCopy(fields()[1].schema(), other.payload);
                fieldSetFlags()[1] = other.fieldSetFlags()[1];
            }
        }

        /**
         * Creates a Builder by copying an existing Decree instance
         *
         * @param other The existing instance to copy.
         */
        private Builder(Decree other) {
            super(SCHEMA$);
            if (isValidValue(fields()[0], other.decreeReference)) {
                this.decreeReference = data().deepCopy(fields()[0].schema(), other.decreeReference);
                fieldSetFlags()[0] = true;
            }
            this.decreeReferenceBuilder = null;
            if (isValidValue(fields()[1], other.payload)) {
                this.payload = data().deepCopy(fields()[1].schema(), other.payload);
                fieldSetFlags()[1] = true;
            }
        }

        /**
         * Gets the value of the 'decreeReference' field.
         *
         * @return The value.
         */
        public ch.admin.bit.jeap.processarchive.test.DecreeReference getDecreeReference() {
            return decreeReference;
        }

        /**
         * Gets the value of the 'decreeReference' field as an Optional&lt;ch.admin.bit.jeap.processarchive.test.DecreeReference&gt;.
         *
         * @return The Optional&lt;value&gt;.
         */
        public Optional<ch.admin.bit.jeap.processarchive.test.DecreeReference> getOptionalDecreeReference() {
            return Optional.<ch.admin.bit.jeap.processarchive.test.DecreeReference>ofNullable(decreeReference);
        }

        /**
         * Sets the value of the 'decreeReference' field.
         *
         * @param value The value of 'decreeReference'.
         * @return This builder.
         */
        public Builder setDecreeReference(ch.admin.bit.jeap.processarchive.test.DecreeReference value) {
            validate(fields()[0], value);
            this.decreeReferenceBuilder = null;
            this.decreeReference = value;
            fieldSetFlags()[0] = true;
            return this;
        }

        /**
         * Checks whether the 'decreeReference' field has been set.
         *
         * @return True if the 'decreeReference' field has been set, false otherwise.
         */
        public boolean hasDecreeReference() {
            return fieldSetFlags()[0];
        }

        /**
         * Gets the Builder instance for the 'decreeReference' field and creates one if it doesn't exist yet.
         *
         * @return This builder.
         */
        public ch.admin.bit.jeap.processarchive.test.DecreeReference.Builder getDecreeReferenceBuilder() {
            if (decreeReferenceBuilder == null) {
                if (hasDecreeReference()) {
                    setDecreeReferenceBuilder(ch.admin.bit.jeap.processarchive.test.DecreeReference.newBuilder(decreeReference));
                } else {
                    setDecreeReferenceBuilder(ch.admin.bit.jeap.processarchive.test.DecreeReference.newBuilder());
                }
            }
            return decreeReferenceBuilder;
        }

        /**
         * Sets the Builder instance for the 'decreeReference' field
         *
         * @param value The builder instance that must be set.
         * @return This builder.
         */
        public Builder setDecreeReferenceBuilder(ch.admin.bit.jeap.processarchive.test.DecreeReference.Builder value) {
            clearDecreeReference();
            decreeReferenceBuilder = value;
            return this;
        }

        /**
         * Checks whether the 'decreeReference' field has an active Builder instance
         *
         * @return True if the 'decreeReference' field has an active Builder instance
         */
        public boolean hasDecreeReferenceBuilder() {
            return decreeReferenceBuilder != null;
        }

        /**
         * Clears the value of the 'decreeReference' field.
         *
         * @return This builder.
         */
        public Builder clearDecreeReference() {
            decreeReference = null;
            decreeReferenceBuilder = null;
            fieldSetFlags()[0] = false;
            return this;
        }

        /**
         * Gets the value of the 'payload' field.
         *
         * @return The value.
         */
        public String getPayload() {
            return payload;
        }

        /**
         * Gets the value of the 'payload' field as an Optional&lt;java.lang.String&gt;.
         *
         * @return The Optional&lt;value&gt;.
         */
        public Optional<String> getOptionalPayload() {
            return Optional.<String>ofNullable(payload);
        }

        /**
         * Sets the value of the 'payload' field.
         *
         * @param value The value of 'payload'.
         * @return This builder.
         */
        public Builder setPayload(String value) {
            validate(fields()[1], value);
            this.payload = value;
            fieldSetFlags()[1] = true;
            return this;
        }

        /**
         * Checks whether the 'payload' field has been set.
         *
         * @return True if the 'payload' field has been set, false otherwise.
         */
        public boolean hasPayload() {
            return fieldSetFlags()[1];
        }


        /**
         * Clears the value of the 'payload' field.
         *
         * @return This builder.
         */
        public Builder clearPayload() {
            payload = null;
            fieldSetFlags()[1] = false;
            return this;
        }

        @Override
        @SuppressWarnings("unchecked")
        public Decree build() {
            try {
                Decree record = new Decree();
                if (decreeReferenceBuilder != null) {
                    try {
                        record.decreeReference = this.decreeReferenceBuilder.build();
                    } catch (org.apache.avro.AvroMissingFieldException e) {
                        e.addParentField(record.getSchema().getField("decreeReference"));
                        throw e;
                    }
                } else {
                    record.decreeReference = fieldSetFlags()[0] ? this.decreeReference : (ch.admin.bit.jeap.processarchive.test.DecreeReference) defaultValue(fields()[0]);
                }
                record.payload = fieldSetFlags()[1] ? this.payload : (String) defaultValue(fields()[1]);
                return record;
            } catch (org.apache.avro.AvroMissingFieldException e) {
                throw e;
            } catch (Exception e) {
                throw new org.apache.avro.AvroRuntimeException(e);
            }
        }
    }

    @SuppressWarnings("unchecked")
    private static final org.apache.avro.io.DatumWriter<Decree>
            WRITER$ = (org.apache.avro.io.DatumWriter<Decree>) MODEL$.createDatumWriter(SCHEMA$);

    @Override
    public void writeExternal(java.io.ObjectOutput out)
            throws java.io.IOException {
        WRITER$.write(this, SpecificData.getEncoder(out));
    }

    @SuppressWarnings("unchecked")
    private static final org.apache.avro.io.DatumReader<Decree>
            READER$ = (org.apache.avro.io.DatumReader<Decree>) MODEL$.createDatumReader(SCHEMA$);

    @Override
    public void readExternal(java.io.ObjectInput in)
            throws java.io.IOException {
        READER$.read(this, SpecificData.getDecoder(in));
    }

    @Override
    protected boolean hasCustomCoders() {
        return true;
    }

    @Override
    public void customEncode(org.apache.avro.io.Encoder out)
            throws java.io.IOException {
        this.decreeReference.customEncode(out);

        out.writeString(this.payload);

    }

    @Override
    public void customDecode(org.apache.avro.io.ResolvingDecoder in)
            throws java.io.IOException {
        org.apache.avro.Schema.Field[] fieldOrder = in.readFieldOrderIfDiff();
        if (fieldOrder == null) {
            if (this.decreeReference == null) {
                this.decreeReference = new ch.admin.bit.jeap.processarchive.test.DecreeReference();
            }
            this.decreeReference.customDecode(in);

            this.payload = in.readString();

        } else {
            for (int i = 0; i < 2; i++) {
                switch (fieldOrder[i].pos()) {
                    case 0:
                        if (this.decreeReference == null) {
                            this.decreeReference = new ch.admin.bit.jeap.processarchive.test.DecreeReference();
                        }
                        this.decreeReference.customDecode(in);
                        break;

                    case 1:
                        this.payload = in.readString();
                        break;

                    default:
                        throw new java.io.IOException("Corrupt ResolvingDecoder.");
                }
            }
        }
    }
}










