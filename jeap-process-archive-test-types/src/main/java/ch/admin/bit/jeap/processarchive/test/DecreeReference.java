/**
 * Autogenerated by Avro
 * <p>
 * DO NOT EDIT DIRECTLY
 */
package ch.admin.bit.jeap.processarchive.test;

import org.apache.avro.message.BinaryMessageDecoder;
import org.apache.avro.message.BinaryMessageEncoder;
import org.apache.avro.message.SchemaStore;
import org.apache.avro.specific.SpecificData;

import java.util.Optional;

@org.apache.avro.specific.AvroGenerated
public class DecreeReference extends org.apache.avro.specific.SpecificRecordBase implements org.apache.avro.specific.SpecificRecord {
    private static final long serialVersionUID = -5403374855319759085L;
    public static final org.apache.avro.Schema SCHEMA$ = new org.apache.avro.Schema.Parser().parse("{\"type\":\"record\",\"name\":\"DecreeReference\",\"namespace\":\"ch.admin.bit.jeap.processarchive.test\",\"fields\":[{\"name\":\"type\",\"type\":{\"type\":\"string\",\"avro.java.string\":\"String\"}},{\"name\":\"id\",\"type\":{\"type\":\"string\",\"avro.java.string\":\"String\"}}]}");

    public static org.apache.avro.Schema getClassSchema() {
        return SCHEMA$;
    }

    private static SpecificData MODEL$ = new SpecificData();


    private static final BinaryMessageEncoder<DecreeReference> ENCODER =
            new BinaryMessageEncoder<DecreeReference>(MODEL$, SCHEMA$);

    private static final BinaryMessageDecoder<DecreeReference> DECODER =
            new BinaryMessageDecoder<DecreeReference>(MODEL$, SCHEMA$);

    /**
     * Return the BinaryMessageEncoder instance used by this class.
     *
     * @return the message encoder used by this class
     */
    public static BinaryMessageEncoder<DecreeReference> getEncoder() {
        return ENCODER;
    }

    /**
     * Return the BinaryMessageDecoder instance used by this class.
     *
     * @return the message decoder used by this class
     */
    public static BinaryMessageDecoder<DecreeReference> getDecoder() {
        return DECODER;
    }

    /**
     * Create a new BinaryMessageDecoder instance for this class that uses the specified {@link SchemaStore}.
     *
     * @param resolver a {@link SchemaStore} used to find schemas by fingerprint
     * @return a BinaryMessageDecoder instance for this class backed by the given SchemaStore
     */
    public static BinaryMessageDecoder<DecreeReference> createDecoder(SchemaStore resolver) {
        return new BinaryMessageDecoder<DecreeReference>(MODEL$, SCHEMA$, resolver);
    }

    /**
     * Serializes this DecreeReference to a ByteBuffer.
     *
     * @return a buffer holding the serialized data for this instance
     * @throws java.io.IOException if this instance could not be serialized
     */
    public java.nio.ByteBuffer toByteBuffer() throws java.io.IOException {
        return ENCODER.encode(this);
    }

    /**
     * Deserializes a DecreeReference from a ByteBuffer.
     *
     * @param b a byte buffer holding serialized data for an instance of this class
     * @return a DecreeReference instance decoded from the given buffer
     * @throws java.io.IOException if the given bytes could not be deserialized into an instance of this class
     */
    public static DecreeReference fromByteBuffer(
            java.nio.ByteBuffer b) throws java.io.IOException {
        return DECODER.decode(b);
    }

    private String type;
    private String id;

    /**
     * Default constructor.  Note that this does not initialize fields
     * to their default values from the schema.  If that is desired then
     * one should use <code>newBuilder()</code>.
     */
    public DecreeReference() {
    }

    /**
     * All-args constructor.
     *
     * @param type The new value for type
     * @param id   The new value for id
     */
    public DecreeReference(String type, String id) {
        this.type = type;
        this.id = id;
    }

    public SpecificData getSpecificData() {
        return MODEL$;
    }

    public org.apache.avro.Schema getSchema() {
        return SCHEMA$;
    }

    // Used by DatumWriter.  Applications should not call.
    public Object get(int field$) {
        switch (field$) {
            case 0:
                return type;
            case 1:
                return id;
            default:
                throw new org.apache.avro.AvroRuntimeException("Bad index");
        }
    }

    // Used by DatumReader.  Applications should not call.
    @SuppressWarnings(value = "unchecked")
    public void put(int field$, Object value$) {
        switch (field$) {
            case 0:
                type = (String) value$;
                break;
            case 1:
                id = (String) value$;
                break;
            default:
                throw new org.apache.avro.AvroRuntimeException("Bad index");
        }
    }

    /**
     * Gets the value of the 'type' field.
     *
     * @return The value of the 'type' field.
     */
    public String getType() {
        return type;
    }

    /**
     * Gets the value of the 'type' field as an Optional&lt;java.lang.String&gt;.
     *
     * @return The value wrapped in an Optional&lt;java.lang.String&gt;.
     */
    public Optional<String> getOptionalType() {
        return Optional.<String>ofNullable(type);
    }

    /**
     * Sets the value of the 'type' field.
     *
     * @param value the value to set.
     */
    public void setType(String value) {
        this.type = value;
    }

    /**
     * Gets the value of the 'id' field.
     *
     * @return The value of the 'id' field.
     */
    public String getId() {
        return id;
    }

    /**
     * Gets the value of the 'id' field as an Optional&lt;java.lang.String&gt;.
     *
     * @return The value wrapped in an Optional&lt;java.lang.String&gt;.
     */
    public Optional<String> getOptionalId() {
        return Optional.<String>ofNullable(id);
    }

    /**
     * Sets the value of the 'id' field.
     *
     * @param value the value to set.
     */
    public void setId(String value) {
        this.id = value;
    }

    /**
     * Creates a new DecreeReference RecordBuilder.
     *
     * @return A new DecreeReference RecordBuilder
     */
    public static Builder newBuilder() {
        return new Builder();
    }

    /**
     * Creates a new DecreeReference RecordBuilder by copying an existing Builder.
     *
     * @param other The existing builder to copy.
     * @return A new DecreeReference RecordBuilder
     */
    public static Builder newBuilder(Builder other) {
        if (other == null) {
            return new Builder();
        } else {
            return new Builder(other);
        }
    }

    /**
     * Creates a new DecreeReference RecordBuilder by copying an existing DecreeReference instance.
     *
     * @param other The existing instance to copy.
     * @return A new DecreeReference RecordBuilder
     */
    public static Builder newBuilder(DecreeReference other) {
        if (other == null) {
            return new Builder();
        } else {
            return new Builder(other);
        }
    }

    /**
     * RecordBuilder for DecreeReference instances.
     */
    public static class Builder extends org.apache.avro.specific.SpecificRecordBuilderBase<DecreeReference>
            implements org.apache.avro.data.RecordBuilder<DecreeReference> {

        private String type;
        private String id;

        /**
         * Creates a new Builder
         */
        private Builder() {
            super(SCHEMA$);
        }

        /**
         * Creates a Builder by copying an existing Builder.
         *
         * @param other The existing Builder to copy.
         */
        private Builder(Builder other) {
            super(other);
            if (isValidValue(fields()[0], other.type)) {
                this.type = data().deepCopy(fields()[0].schema(), other.type);
                fieldSetFlags()[0] = other.fieldSetFlags()[0];
            }
            if (isValidValue(fields()[1], other.id)) {
                this.id = data().deepCopy(fields()[1].schema(), other.id);
                fieldSetFlags()[1] = other.fieldSetFlags()[1];
            }
        }

        /**
         * Creates a Builder by copying an existing DecreeReference instance
         *
         * @param other The existing instance to copy.
         */
        private Builder(DecreeReference other) {
            super(SCHEMA$);
            if (isValidValue(fields()[0], other.type)) {
                this.type = data().deepCopy(fields()[0].schema(), other.type);
                fieldSetFlags()[0] = true;
            }
            if (isValidValue(fields()[1], other.id)) {
                this.id = data().deepCopy(fields()[1].schema(), other.id);
                fieldSetFlags()[1] = true;
            }
        }

        /**
         * Gets the value of the 'type' field.
         *
         * @return The value.
         */
        public String getType() {
            return type;
        }

        /**
         * Gets the value of the 'type' field as an Optional&lt;java.lang.String&gt;.
         *
         * @return The Optional&lt;value&gt;.
         */
        public Optional<String> getOptionalType() {
            return Optional.<String>ofNullable(type);
        }

        /**
         * Sets the value of the 'type' field.
         *
         * @param value The value of 'type'.
         * @return This builder.
         */
        public Builder setType(String value) {
            validate(fields()[0], value);
            this.type = value;
            fieldSetFlags()[0] = true;
            return this;
        }

        /**
         * Checks whether the 'type' field has been set.
         *
         * @return True if the 'type' field has been set, false otherwise.
         */
        public boolean hasType() {
            return fieldSetFlags()[0];
        }


        /**
         * Clears the value of the 'type' field.
         *
         * @return This builder.
         */
        public Builder clearType() {
            type = null;
            fieldSetFlags()[0] = false;
            return this;
        }

        /**
         * Gets the value of the 'id' field.
         *
         * @return The value.
         */
        public String getId() {
            return id;
        }

        /**
         * Gets the value of the 'id' field as an Optional&lt;java.lang.String&gt;.
         *
         * @return The Optional&lt;value&gt;.
         */
        public Optional<String> getOptionalId() {
            return Optional.<String>ofNullable(id);
        }

        /**
         * Sets the value of the 'id' field.
         *
         * @param value The value of 'id'.
         * @return This builder.
         */
        public Builder setId(String value) {
            validate(fields()[1], value);
            this.id = value;
            fieldSetFlags()[1] = true;
            return this;
        }

        /**
         * Checks whether the 'id' field has been set.
         *
         * @return True if the 'id' field has been set, false otherwise.
         */
        public boolean hasId() {
            return fieldSetFlags()[1];
        }


        /**
         * Clears the value of the 'id' field.
         *
         * @return This builder.
         */
        public Builder clearId() {
            id = null;
            fieldSetFlags()[1] = false;
            return this;
        }

        @Override
        @SuppressWarnings("unchecked")
        public DecreeReference build() {
            try {
                DecreeReference record = new DecreeReference();
                record.type = fieldSetFlags()[0] ? this.type : (String) defaultValue(fields()[0]);
                record.id = fieldSetFlags()[1] ? this.id : (String) defaultValue(fields()[1]);
                return record;
            } catch (org.apache.avro.AvroMissingFieldException e) {
                throw e;
            } catch (Exception e) {
                throw new org.apache.avro.AvroRuntimeException(e);
            }
        }
    }

    @SuppressWarnings("unchecked")
    private static final org.apache.avro.io.DatumWriter<DecreeReference>
            WRITER$ = (org.apache.avro.io.DatumWriter<DecreeReference>) MODEL$.createDatumWriter(SCHEMA$);

    @Override
    public void writeExternal(java.io.ObjectOutput out)
            throws java.io.IOException {
        WRITER$.write(this, SpecificData.getEncoder(out));
    }

    @SuppressWarnings("unchecked")
    private static final org.apache.avro.io.DatumReader<DecreeReference>
            READER$ = (org.apache.avro.io.DatumReader<DecreeReference>) MODEL$.createDatumReader(SCHEMA$);

    @Override
    public void readExternal(java.io.ObjectInput in)
            throws java.io.IOException {
        READER$.read(this, SpecificData.getDecoder(in));
    }

    @Override
    protected boolean hasCustomCoders() {
        return true;
    }

    @Override
    public void customEncode(org.apache.avro.io.Encoder out)
            throws java.io.IOException {
        out.writeString(this.type);

        out.writeString(this.id);

    }

    @Override
    public void customDecode(org.apache.avro.io.ResolvingDecoder in)
            throws java.io.IOException {
        org.apache.avro.Schema.Field[] fieldOrder = in.readFieldOrderIfDiff();
        if (fieldOrder == null) {
            this.type = in.readString();

            this.id = in.readString();

        } else {
            for (int i = 0; i < 2; i++) {
                switch (fieldOrder[i].pos()) {
                    case 0:
                        this.type = in.readString();
                        break;

                    case 1:
                        this.id = in.readString();
                        break;

                    default:
                        throw new java.io.IOException("Corrupt ResolvingDecoder.");
                }
            }
        }
    }
}










